// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Vite
// plugin that tells the Electron app where to look for the Vite-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_VITE_DEV_SERVER_URL: string;
declare const MAIN_WINDOW_VITE_NAME: string;

// Preload types
interface ThemeModeContext {
    toggle: () => Promise<boolean>;
    dark: () => Promise<void>;
    light: () => Promise<void>;
    system: () => Promise<boolean>;
    current: () => Promise<"dark" | "light" | "system">;
}

interface ElectronWindow {
    minimize: () => Promise<void>;
    maximize: () => Promise<void>;
    close: () => Promise<void>;
    isMaximized: () => Promise<boolean>;
    onWindowStateChange: (callback: (isMaximized: boolean) => void) => void;
    inspectElement: (x: number, y: number) => Promise<void>;
    isElectron: () => boolean;
}

interface LoadingManagerAPI {
    completeLoading: () => void;
    onAppReady: (callback: () => void) => void;
}

interface DialogOptions {
    title?: string;
    defaultPath?: string;
    buttonLabel?: string;
    filters?: Array<{ name: string; extensions: string[] }>;
    properties?: Array<
        | "openFile"
        | "openDirectory"
        | "multiSelections"
        | "showHiddenFiles"
        | "createDirectory"
        | "promptToCreate"
        | "noResolveAliases"
        | "treatPackageAsDirectory"
        | "dontAddToRecent"
    >;
    message?: string;
    securityScopedBookmarks?: boolean;
}

interface DialogResult {
    canceled: boolean;
    filePaths?: string[];
    filePath?: string;
    bookmarks?: string[];
}

interface FileStats {
    size: number;
    isFile: boolean;
    isDirectory: boolean;
    createdAt: Date;
    modifiedAt: Date;
    accessedAt: Date;
}

interface FileWatchEvent {
    watchId: string;
    eventType: "rename" | "change";
    filename: string | null;
    filePath: string;
}

interface SystemPaths {
    home: string;
    appData: string;
    userData: string;
    temp: string;
    desktop: string;
    documents: string;
    downloads: string;
    music: string;
    pictures: string;
    videos: string;
}

interface DirectoryEntry {
    name: string;
    path: string;
    isFile: boolean;
    isDirectory: boolean;
    size?: number;
    children?: DirectoryEntry[];
}

interface FileSystemContext {
    openDialog: (
        options?: DialogOptions,
    ) => Promise<{ success: boolean; data?: DialogResult; error?: string }>;
    saveDialog: (
        options?: DialogOptions,
    ) => Promise<{ success: boolean; data?: DialogResult; error?: string }>;

    readFile: (
        filePath: string,
        encoding?: string | null,
    ) => Promise<{ success: boolean; data?: string | Buffer; error?: string }>;
    writeFile: (
        filePath: string,
        data: string | Buffer,
        encoding?: string,
    ) => Promise<{ success: boolean; error?: string }>;
    fileExists: (
        filePath: string,
    ) => Promise<{ success: boolean; data?: boolean; error?: string }>;
    deleteFile: (
        filePath: string,
    ) => Promise<{ success: boolean; error?: string }>;
    copyFile: (
        sourcePath: string,
        destPath: string,
    ) => Promise<{ success: boolean; error?: string }>;
    moveFile: (
        sourcePath: string,
        destPath: string,
    ) => Promise<{ success: boolean; error?: string }>;
    getFileStats: (
        filePath: string,
    ) => Promise<{ success: boolean; data?: FileStats; error?: string }>;

    createDirectory: (
        dirPath: string,
        recursive?: boolean,
    ) => Promise<{ success: boolean; error?: string }>;
    readDirectory: (
        dirPath: string,
        extensions?: string[],
    ) => Promise<{ success: boolean; data?: string[]; error?: string }>;
    readDirectoryRecursive: (
        dirPath: string,
        maxDepth?: number,
        extensions?: string[],
    ) => Promise<{ success: boolean; data?: DirectoryEntry[]; error?: string }>;
    directoryExists: (
        dirPath: string,
    ) => Promise<{ success: boolean; data?: boolean; error?: string }>;
    deleteDirectory: (
        dirPath: string,
        recursive?: boolean,
    ) => Promise<{ success: boolean; error?: string }>;

    watchFile: (
        filePath: string,
    ) => Promise<{ success: boolean; data?: string; error?: string }>;
    unwatchFile: (
        watchId: string,
    ) => Promise<{ success: boolean; error?: string }>;
    watchDirectory: (
        dirPath: string,
        recursive?: boolean,
    ) => Promise<{ success: boolean; data?: string; error?: string }>;
    unwatchDirectory: (
        watchId: string,
    ) => Promise<{ success: boolean; error?: string }>;
    stopWatching: (
        watchId: string,
    ) => Promise<{ success: boolean; error?: string }>;
    stopAllWatching: () => Promise<{ success: boolean; error?: string }>;

    onFileChange: (callback: (event: FileWatchEvent) => void) => () => void;
    onDirectoryChange: (
        callback: (event: FileWatchEvent) => void,
    ) => () => void;

    openPath: (path: string) => Promise<{ success: boolean; error?: string }>;
    showItemInFolder: (
        path: string,
    ) => Promise<{ success: boolean; error?: string }>;
    moveToTrash: (
        path: string,
    ) => Promise<{ success: boolean; error?: string }>;

    getSystemPaths: () => Promise<{
        success: boolean;
        data?: SystemPaths;
        error?: string;
    }>;
}

interface OGData {
    title?: string;
    description?: string;
    imageUrl?: string;
    siteName?: string;
    url: string;
}

interface ogAPI {
    fetchMeta: (url: string) => Promise<OGData>;
}

declare interface Window {
    themeMode: ThemeModeContext;
    electronWindow: ElectronWindow;
    loadingManager: LoadingManagerAPI;
    fileSystem: FileSystemContext;
    ogAPI: ogAPI;
    appConfig: {
        name: string;
        protocolName: string;
    };
    platform: "web" | "electron";
    __REDUX_DEVTOOLS_EXTENSION__?: unknown;
}
